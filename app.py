# --------------------------------------------------------------------------------
# SP CRIME ANALYTICS - APLICA√á√ÉO WEB PROFISSIONAL (VERS√ÉO 2.1 - CORRIGIDA)
# Autor: Gemini - Cientista de Dados S√™nior
# Descri√ß√£o: Dashboard robusto para an√°lise interativa de dados criminais,
#            focado em clareza, insights e usabilidade para todos os p√∫blicos.
# --------------------------------------------------------------------------------

import streamlit as st
import pandas as pd
import numpy as np
import folium
from folium.plugins import HeatMap, MarkerCluster
from streamlit_folium import st_folium
from wordcloud import WordCloud
import matplotlib.pyplot as plt
import seaborn as sns
import networkx as nx

# --- CONFIGURA√á√ÉO DA P√ÅGINA ---
st.set_page_config(
    page_title="SP Crime Analytics | Dashboard Profissional",
    page_icon="üö®",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- FUN√á√ïES DE CARREGAMENTO E PR√â-PROCESSAMENTO ---
@st.cache_data
def carregar_dados():
    """
    Carrega, limpa e pr√©-processa o dataset de crimes.
    A fun√ß√£o retorna um DataFrame do Pandas pronto para an√°lise.
    """
    try:
        df = pd.read_csv('dataset-limpo.csv')
    except FileNotFoundError:
        st.error("Erro Cr√≠tico: Arquivo 'dataset-limpo.csv' n√£o encontrado. Por favor, coloque-o na mesma pasta do app.py.")
        return None

    df['time'] = pd.to_datetime(df['time'], errors='coerce')
    df.dropna(subset=['time', 'latitude', 'longitude'], inplace=True)
    df['hora'] = df['time'].dt.hour
    df['dia_semana'] = df['time'].dt.day_name()
    df['mes_ano'] = df['time'].dt.to_period('M').astype(str)
    df['bairro'] = df['bairro'].str.strip().str.title()
    
    itens_para_processar = ['Bicicleta', 'Bolsa ou Mochila', 'Carteira', 'Cart√£o de Cr√©dito', 'Celular', 'Computador', 'DVD', 'Dinheiro', 'Documentos', 'Equipamento de Som', 'Estepe', 'MP4 ou Ipod', 'M√≥veis', 'Notebook', 'Outros', 'Rel√≥gio', 'Som', 'Tablet', 'Tv']
    for col in itens_para_processar:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0).astype(int)

    return df

# Executa o carregamento dos dados
df = carregar_dados()

# --- VARI√ÅVEL GLOBAL PARA COLUNAS DE ITENS ---
# CORRE√á√ÉO: Definindo a lista de colunas aqui para que fique acess√≠vel a todo o script.
itens_colunas = ['Bicicleta', 'Bolsa ou Mochila', 'Carteira', 'Cart√£o de Cr√©dito', 'Celular', 'Computador', 'DVD', 'Dinheiro', 'Documentos', 'Equipamento de Som', 'Estepe', 'MP4 ou Ipod', 'M√≥veis', 'Notebook', 'Outros', 'Rel√≥gio', 'Som', 'Tablet', 'Tv']


# --- BARRA LATERAL (MENU DE NAVEGA√á√ÉO) ---
st.sidebar.title("SP Crime Analytics üö®")
st.sidebar.markdown("Uma ferramenta profissional para an√°lise e investiga√ß√£o de padr√µes criminais em S√£o Paulo.")

pagina_selecionada = st.sidebar.selectbox(
    "Selecione uma an√°lise:",
    ["P√°gina Inicial", "Dashboard Executivo", "An√°lise por Bairro", "An√°lise de Correla√ß√£o", "An√°lise Temporal", "Investiga√ß√£o de Clusters"]
)

st.sidebar.markdown("---")
st.sidebar.info("Desenvolvido por Gemini, seu assistente de Ci√™ncia de Dados.")


# --- ESTRUTURA DAS P√ÅGINAS ---

# P√°gina Inicial
if pagina_selecionada == "P√°gina Inicial":
    st.title("Bem-vindo ao SP Crime Analytics")
    st.subheader("Transformando Dados em Intelig√™ncia para a Seguran√ßa P√∫blica")
    st.markdown("""
    Esta plataforma interativa foi constru√≠da para explorar, visualizar e analisar dados de ocorr√™ncias criminais na cidade de S√£o Paulo. 
    Nosso objetivo √© fornecer uma ferramenta clara e poderosa para que analistas, gestores e o p√∫blico em geral possam entender as din√¢micas da criminalidade na cidade.

    #### **O que voc√™ encontrar√° aqui?**
    - **Dashboard Executivo:** Uma vis√£o macro da criminalidade com os principais indicadores e mapas de calor.
    - **An√°lise por Bairro:** Investigue a fundo a situa√ß√£o de um bairro espec√≠fico de forma interativa.
    - **An√°lise de Correla√ß√£o:** Entenda a rela√ß√£o estat√≠stica entre os itens roubados e as circunst√¢ncias do crime.
    - **An√°lise Temporal:** Observe a evolu√ß√£o dos crimes no mapa ao longo do tempo.
    - **Investiga√ß√£o de Clusters:** Explore grupos de crimes com *modus operandi* similar, identificados por algoritmos de Machine Learning.

    Utilize o menu na barra lateral √† esquerda para navegar entre as diferentes se√ß√µes de an√°lise.
    """)
    if df is not None:
        st.info(f"""
        **Vis√£o Geral do Dataset:**
        - **Total de Registros Analisados:** {len(df):,}
        - **Per√≠odo Coberto:** De {df['time'].min().strftime('%d/%m/%Y')} a {df['time'].max().strftime('%d/%m/%Y')}
        """, icon="üìä")


# Dashboard Executivo
elif pagina_selecionada == "Dashboard Executivo":
    st.title("Dashboard Executivo da Criminalidade")
    
    if df is not None:
        st.markdown("*Esta se√ß√£o apresenta os indicadores-chave de desempenho (KPIs) e visualiza√ß√µes gerais para um entendimento r√°pido do cen√°rio criminal.*")

        total_ocorrencias = len(df)
        bairro_mais_comum = df['bairro'].mode()[0]
        hora_pico = df['hora'].mode()[0]
        principal_item = df[itens_colunas].sum().idxmax()

        col1, col2, col3, col4 = st.columns(4)
        col1.metric("Total de Ocorr√™ncias", f"{total_ocorrencias:,}", help="N√∫mero total de registros v√°lidos no dataset.")
        col2.metric("Bairro com Mais Casos", bairro_mais_comum, help="O bairro que concentra o maior n√∫mero de ocorr√™ncias.")
        col3.metric("Hor√°rio de Pico", f"{hora_pico}h", help="A hora do dia com maior frequ√™ncia de crimes.")
        col4.metric("Principal Alvo", principal_item, help="O tipo de bem mais visado nos crimes registrados.")
        
        st.markdown("---")

        col1, col2 = st.columns(2)
        with col1:
            st.subheader("Distribui√ß√£o de Crimes por Hora")
            st.markdown("*Este gr√°fico de barras mostra em quais horas do dia os crimes s√£o mais frequentes, ajudando a identificar os per√≠odos de maior risco.*")
            fig, ax = plt.subplots(figsize=(8, 5))
            sns.countplot(data=df, x='hora', ax=ax, palette='viridis')
            ax.set_xlabel("Hora do Dia")
            ax.set_ylabel("Contagem de Ocorr√™ncias")
            st.pyplot(fig)
        with col2:
            st.subheader("Distribui√ß√£o por Dia da Semana")
            st.markdown("*Aqui vemos a contagem de crimes para cada dia da semana. Padr√µes podem indicar uma rela√ß√£o com a rotina da cidade (dias √∫teis vs. fins de semana).*")
            fig, ax = plt.subplots(figsize=(8, 5))
            sns.countplot(data=df, x='dia_semana', ax=ax, palette='plasma', order=df['dia_semana'].value_counts().index)
            ax.set_xlabel("Dia da Semana")
            ax.set_ylabel("Contagem")
            plt.xticks(rotation=45)
            st.pyplot(fig)
            
        st.markdown("---")
        
        st.subheader("Mapa Geogr√°fico de Ocorr√™ncias (Hotspots)")
        st.markdown("*Este mapa interativo mostra a concentra√ß√£o geogr√°fica dos crimes. A camada de calor (manchas vermelhas) indica √°reas de alta incid√™ncia. Os c√≠rculos com n√∫meros (clusters) mostram a contagem exata de ocorr√™ncias naquela regi√£o. D√™ zoom para explorar.*")
        
        mapa_interativo = folium.Map(location=[-23.550520, -46.633308], zoom_start=11, tiles="cartodbdark_matter")
        
        heat_data = [[row['latitude'], row['longitude']] for _, row in df.iterrows()]
        HeatMap(heat_data, radius=15).add_to(mapa_interativo)
        
        marker_cluster = MarkerCluster().add_to(mapa_interativo)
        for _, row in df.sample(min(5000, len(df))).iterrows():
            folium.Marker(
                location=[row['latitude'], row['longitude']],
                popup=f"<b>{row['titulo']}</b>",
                icon=None
            ).add_to(marker_cluster)

        st_folium(mapa_interativo, width=1200, height=500, returned_objects=[])

# An√°lise por Bairro
elif pagina_selecionada == "An√°lise por Bairro":
    st.title("An√°lise Detalhada por Bairro")
    st.markdown("*Selecione um bairro na lista abaixo para filtrar todos os dados e visualizar um relat√≥rio espec√≠fico para a regi√£o, incluindo seus pr√≥prios KPIs e mapas.*")
    
    bairros_unicos = sorted(df['bairro'].dropna().unique())
    bairro_selecionado = st.selectbox("Selecione um Bairro:", bairros_unicos)

    if bairro_selecionado:
        df_bairro = df[df['bairro'] == bairro_selecionado]
        st.header(f"Relat√≥rio para: {bairro_selecionado}")

        if not df_bairro.empty:
            principal_item_bairro = df_bairro[itens_colunas].sum().idxmax()
            hora_pico_bairro = f"{df_bairro['hora'].mode()[0]}h"
        else:
            principal_item_bairro = "N/A"
            hora_pico_bairro = "N/A"

        col1, col2, col3 = st.columns(3)
        col1.metric("Total de Ocorr√™ncias", len(df_bairro))
        col2.metric("Hor√°rio de Pico", hora_pico_bairro)
        col3.metric("Principal Alvo no Bairro", principal_item_bairro)

        col1, col2 = st.columns([1, 2])
        with col1:
            st.subheader("Crimes por Hora (Local)")
            fig, ax = plt.subplots()
            sns.countplot(data=df_bairro, y='hora', ax=ax, palette='crest', orient='h')
            ax.set_xlabel("Contagem")
            ax.set_ylabel("Hora do Dia")
            st.pyplot(fig)
        with col2:
            st.subheader("Mapa de Ocorr√™ncias (Local)")
            if not df_bairro.empty:
                mapa_bairro = folium.Map(location=[df_bairro['latitude'].mean(), df_bairro['longitude'].mean()], zoom_start=14)
                for _, row in df_bairro.iterrows():
                    folium.Marker(
                        location=[row['latitude'], row['longitude']],
                        popup=f"<b>{row['titulo']}</b><br>{row['time'].strftime('%d/%m/%Y %H:%M')}"
                    ).add_to(mapa_bairro)
                st_folium(mapa_bairro, width=800, height=400, returned_objects=[])
            else:
                st.write("N√£o h√° dados geogr√°ficos para exibir.")

# An√°lise de Correla√ß√£o
elif pagina_selecionada == "An√°lise de Correla√ß√£o":
    st.title("An√°lise de Correla√ß√£o entre Vari√°veis")
    st.markdown("*Esta se√ß√£o explora a rela√ß√£o estat√≠stica entre diferentes aspectos dos crimes, como o hor√°rio, o valor do preju√≠zo e os itens levados.*")
    
    st.info("""
    **Como interpretar este gr√°fico?**
    - A **Matriz de Correla√ß√£o** mostra como as vari√°veis se movem em conjunto.
    - **Cores quentes (pr√≥ximas de +1.0):** Indicam uma correla√ß√£o positiva forte. Quando um item √© roubado, o outro tamb√©m tende a ser. Ex: `Dinheiro` e `Carteira`.
    - **Cores frias (pr√≥ximas de -1.0):** Indicam uma correla√ß√£o negativa. Quando um aumenta, o outro diminui.
    - **Cores neutras (pr√≥ximas de 0):** Indicam que n√£o h√° uma rela√ß√£o linear clara entre as vari√°veis.
    """, icon="üí°")

    colunas_corr = ['hora', 'valor_prejuizo'] + itens_colunas
    matriz_corr = df[colunas_corr].corr()

    fig, ax = plt.subplots(figsize=(18, 15))
    sns.heatmap(matriz_corr, annot=True, cmap='coolwarm', fmt=".2f", linewidths=.5, ax=ax)
    ax.set_title('Matriz de Correla√ß√£o', fontsize=18)
    st.pyplot(fig)


# An√°lise Temporal
elif pagina_selecionada == "An√°lise Temporal":
    st.title("Evolu√ß√£o Temporal dos Crimes")
    st.markdown("*Utilize o controle deslizante de tempo na parte inferior do mapa para navegar m√™s a m√™s. Este mapa **n√£o √© cumulativo**: ele mostra um 'snapshot' de cada m√™s, permitindo observar a din√¢mica e o deslocamento da mancha criminal.*")

    df_mapa_temporal = df.sort_values('time').tail(5000)
    features = []
    for _, row in df_mapa_temporal.iterrows():
        feature = {
            'type': 'Feature',
            'geometry': {'type': 'Point', 'coordinates': [row['longitude'], row['latitude']]},
            'properties': {
                'time': row['time'].strftime('%Y-%m-%d'),
                'popup': f"<b>{row['titulo']}</b><br>Data: {row['time'].strftime('%d/%m/%Y')}",
                'icon': 'circle', 'iconstyle': {'fillColor': '#FF4B4B', 'fillOpacity': 0.8, 'stroke': 'false', 'radius': 6}
            }
        }
        features.append(feature)

    mapa_temporal = folium.Map(location=[-23.550520, -46.633308], zoom_start=11, tiles="cartodbdark_matter")
    folium.plugins.TimestampedGeoJson(
        {'type': 'FeatureCollection', 'features': features},
        period='P1M', duration='P1M', add_last_point=True
    ).add_to(mapa_temporal)
    st_folium(mapa_temporal, width=1200, height=600, returned_objects=[])


# Investiga√ß√£o de Clusters
elif pagina_selecionada == "Investiga√ß√£o de Clusters":
    st.title("Investiga√ß√£o de Clusters de Crimes")
    st.info("""
    **O que √© um Cluster?** Um 'cluster' √© um grupo de crimes que um algoritmo de Machine Learning identificou como sendo muito semelhantes entre si, com base na localiza√ß√£o, hor√°rio e, principalmente, no *modus operandi* descrito no texto da ocorr√™ncia. Analisar um cluster √© como investigar um padr√£o de atua√ß√£o de um mesmo indiv√≠duo ou grupo criminoso.
    """, icon="ü§ñ")

    st.warning("A an√°lise abaixo √© uma **simula√ß√£o** dos resultados do modelo de clusteriza√ß√£o. Os grupos foram gerados aleatoriamente para fins de demonstra√ß√£o da interface.")

    if 'cluster_kmeans' not in df.columns:
        df['cluster_kmeans'] = pd.Series(
            data=np.random.randint(0, 10, len(df)),
            index=df.index
        )
    
    cluster_selecionado = st.slider("Selecione o Cluster para An√°lise:", 0, 9, 0, help="Arraste para explorar os diferentes perfis de crime agrupados pelo algoritmo.")
    df_cluster = df[df['cluster_kmeans'] == cluster_selecionado]

    st.header(f"An√°lise do Perfil do Cluster {cluster_selecionado}")

    with st.expander("Ver Estat√≠sticas Detalhadas do Cluster", expanded=True):
        if not df_cluster.empty:
            bairro_comum_cluster = df_cluster['bairro'].mode()[0]
            hora_media_cluster = int(df_cluster['hora'].mean())
            principal_alvo_cluster = df_cluster[itens_colunas].sum().idxmax()
        else:
            bairro_comum_cluster, hora_media_cluster, principal_alvo_cluster = "N/A", "N/A", "N/A"

        col1, col2, col3, col4 = st.columns(4)
        col1.metric("N¬∫ de Ocorr√™ncias no Cluster", len(df_cluster))
        col2.metric("Bairro Principal do Cluster", bairro_comum_cluster)
        col3.metric("Hor√°rio M√©dio de Atua√ß√£o", f"~{hora_media_cluster}h")
        col4.metric("Principal Alvo do Grupo", principal_alvo_cluster)

    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Nuvem de Palavras do Modus Operandi")
        st.markdown("*As palavras maiores representam os termos mais frequentes nas descri√ß√µes dos crimes deste grupo, revelando o m√©todo de atua√ß√£o.*")
        texto_completo_cluster = ' '.join(df_cluster['titulo'].fillna('') + ' ' + df_cluster['descricao'].fillna(''))
        if texto_completo_cluster.strip():
            wordcloud = WordCloud(width=400, height=300, background_color='white', colormap='Reds').generate(texto_completo_cluster)
            fig, ax = plt.subplots()
            ax.imshow(wordcloud, interpolation='bilinear')
            ax.axis('off')
            st.pyplot(fig)
        else:
            st.write("N√£o h√° texto suficiente para gerar a nuvem de palavras.")
    
    with col2:
        st.subheader("Grafo de Conex√µes Temporais")
        st.markdown("*Este grafo conecta crimes do mesmo cluster que ocorreram em um intervalo de at√© 3 dias. Linhas conectando os pontos (crimes) sugerem uma poss√≠vel 's√©rie' de a√ß√µes do mesmo grupo em um curto per√≠odo.*")
        if len(df_cluster) > 1:
            G = nx.Graph()
            df_sample = df_cluster.sample(n=min(30, len(df_cluster)))
            for _, row in df_sample.iterrows():
                G.add_node(row['id'])
            
            ids = list(df_sample['id'])
            times = list(df_sample['time'])
            for i in range(len(ids)):
                for j in range(i + 1, len(ids)):
                    if abs((times[i] - times[j]).days) <= 3:
                        G.add_edge(ids[i], ids[j])

            fig, ax = plt.subplots()
            pos = nx.spring_layout(G, seed=42)
            nx.draw(G, pos, ax=ax, with_labels=False, node_size=100, node_color='#FF4B4B', edge_color='gray')
            st.pyplot(fig)
        else:
            st.write("N√£o h√° ocorr√™ncias suficientes para gerar uma rede de conex√µes.")
